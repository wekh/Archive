name: OKTV Release update

on:
  schedule:
    - cron: '0 0 */1 * *'  # 每1天自动运行
  workflow_dispatch:

jobs:
  update-ok-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install requests
        run: python -m pip install --upgrade pip requests

      - name: Download and rename APKs, extract first version
        id: download_apks
        run: |
          python - <<'EOF'
          import requests, os, re

          OWNER, REPO, PATH = "youhunwl", "TVAPP", "影视/OK影视"
          file_map = {
              "OK影视-电视版-自带X5": "leanback-armeabi_v7a_x5.apk",
              "OK影视-电视版": "leanback-armeabi_v7a.apk",
              "OK影视-手机版": "mobile-arm64_v8a.apk",
              "海信专版-OK影视": "Hisense-TV.apk"
          }
          DOWNLOAD_DIR = "ok_apk_update/apks"
          os.makedirs(DOWNLOAD_DIR, exist_ok=True)

          version_str = "最新"

          for f in requests.get(f"https://api.github.com/repos/{OWNER}/{REPO}/contents/{PATH}").json():
              for key, save_name in file_map.items():
                  if f['name'].startswith(key):
                      print(f"Downloading {f['name']} → {save_name}")
                      r = requests.get(f['download_url'])
                      r.raise_for_status()
                      with open(os.path.join(DOWNLOAD_DIR, save_name), "wb") as out: out.write(r.content)
                      if version_str == "最新":
                          m = re.search(r'v?(\d+(?:\.\d+)+)', f['name'])
                          if m:
                              version_str = m.group(1)
                      break

          # 使用 Environment File 输出版本号
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as gh_out:
              gh_out.write(f"version={version_str}\n")
          EOF

      - name: Set up GitHub CLI
        run: gh --version

      - name: Delete old OKTV release and tag
        run: |
          gh release delete "OKTV" --yes || true
          git push origin :refs/tags/OKTV || true
          git tag -d "OKTV" || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new OKTV release and upload APKs
        run: |
          git tag "OKTV"
          git push origin "OKTV" --force
          # Release 名称 OKTV+版本号，描述为空
          gh release create "OKTV" -t "OKTV ${{ steps.download_apks.outputs.version }}"
          for f in ok_apk_update/apks/*; do
            gh release upload "OKTV" "$f" --clobber
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
