name: Get IP and Update Cloudflare DNS

###############################################################
#                   !!! 重要前置说明 !!!                      #
# 使用前必须：                                                 #
# 1. 在仓库 Settings > Secrets 中配置：                        #
#    - CLOUDFLARE_API_TOKEN : Cloudflare API令牌               #
#    - SERVER_JIANG_KEY : Server酱的SCKEY（可选）               #
# 2. 修改下方 DOMAIN 和 SUB_DOMAIN 为您的实际域名              #
###############################################################

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时运行一次
      timezone: Asia/Shanghai
  workflow_dispatch:       # 允许手动触发

jobs:
  get_and_update:
    runs-on: ubuntu-latest

    steps:
    # ==================== 初始化 ====================
    - name: Check out code
      uses: actions/checkout@v3

    # ==================== Python环境设置 ====================
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # ==================== IP扫描部分 ====================
    - name: Run IP fetching script (Port 6000)
      id: fetch_ips
      run: |
        import requests
        import ipaddress
        from concurrent.futures import ThreadPoolExecutor, as_completed
        import json
        import random

        def test_port(ip, port=6000):
            try:
                response = requests.get(f'http://{ip}:{port}/status', timeout=2)
                return response.status_code == 200
            except:
                return False

        def fetch_available_ips(ip_ranges):
            available_ips = []
            with ThreadPoolExecutor(max_workers=20) as executor:
                future_to_ip = {
                    executor.submit(test_port, str(ip)): str(ip)
                    for ip_range in ip_ranges
                    for ip in ipaddress.IPv4Network(ip_range)
                }
                for future in as_completed(future_to_ip):
                    if future.result():
                        available_ips.append(future_to_ip[future])
            return available_ips

        if __name__ == "__main__":
            # 要扫描的IP段（可根据需要修改）
            ip_ranges = [
                "118.79.113.0/24",
                "118.79.114.0/24",
                "183.188.22.0/24",
                "171.119.205.0/24",
                "116.179.130.0/24",
                "118.79.119.0/24",
                "118.79.139.0/24",
                "171.119.206.0/24",
                "171.125.90.0/24",
                "183.188.20.0/24",
                "183.188.159.0/24"
            ]
            
            available_ips = fetch_available_ips(ip_ranges)
            print(f"找到 {len(available_ips)} 个可用IP")
            
            if available_ips:
                with open('available_ips.json', 'w') as f:
                    json.dump(available_ips, f)
            else:
                print("no_available_ips=true")
      shell: python

    - name: Check if IPs were found
      id: check_ips
      run: |
        if [ ! -f available_ips.json ]; then
          echo "no_available_ips=true" >> $GITHUB_ENV
        else
          echo "no_available_ips=false" >> $GITHUB_ENV
        fi

    # ==================== Cloudflare DNS更新 ====================
    - name: Update Cloudflare DNS
      if: env.no_available_ips == 'false'
      env:
        # 必需：在仓库Secrets中配置CLOUDFLARE_API_TOKEN
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        # 修改为您的域名和子域名 ↓
        DOMAIN: "wekh.eu.org"    # 主域名（需修改）
        SUB_DOMAIN: "zb"        # 子域名（需修改）
      run: |
        cat << 'EOF' > updateDNS.js
        const fs = require('fs');
        const axios = require('axios');

        // 配置验证
        if (!process.env.CLOUDFLARE_API_TOKEN) {
            console.error('❌ 错误：未检测到CLOUDFLARE_API_TOKEN');
            process.exit(1);
        }

        const CLOUDFLARE_API_TOKEN = process.env.CLOUDFLARE_API_TOKEN;
        const DOMAIN = process.env.DOMAIN;
        const SUB_DOMAIN = process.env.SUB_DOMAIN;
        const FULL_DOMAIN = `${SUB_DOMAIN}.${DOMAIN}`;

        console.log('=== 开始DNS更新流程 ===');
        console.log(`目标域名: ${FULL_DOMAIN}`);

        // 读取可用IP
        const availableIps = JSON.parse(fs.readFileSync('./available_ips.json', 'utf8'));
        console.log('可用IP列表:', availableIps);

        const CLOUDFLARE_API_URL = 'https://api.cloudflare.com/client/v4';
        const headers = {
            'Authorization': `Bearer ${CLOUDFLARE_API_TOKEN}`,
            'Content-Type': 'application/json'
        };

        // 随机选择两个IP（允许重复）
        function selectIps(ipList) {
            if (ipList.length === 0) return [];
            const shuffled = [...ipList].sort(() => 0.5 - Math.random());
            return [shuffled[0], shuffled.length > 1 ? shuffled[1] : shuffled[0]];
        }

        async function getZoneId() {
            const res = await axios.get(`${CLOUDFLARE_API_URL}/zones?name=${DOMAIN}`, { headers });
            return res.data.result[0].id;
        }

        async function getDnsRecords(zoneId) {
            const res = await axios.get(
                `${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records?type=A&name=${FULL_DOMAIN}`,
                { headers }
            );
            return res.data.result;
        }

        async function updateDns(zoneId, recordId, ip) {
            try {
                await axios.put(
                    `${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records/${recordId}`,
                    {
                        type: 'A',
                        name: SUB_DOMAIN,
                        content: ip,
                        ttl: 1,  // 自动TTL
                        proxied: false
                    },
                    { headers }
                );
                console.log(`✅ 记录更新成功: ${ip}`);
            } catch (error) {
                if (error.response?.data?.errors?.[0]?.code === 81058) {
                    console.log(`⏩ IP未变化: ${ip}`);
                } else {
                    throw error;
                }
            }
        }

        async function createDns(zoneId, ip) {
            await axios.post(
                `${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records`,
                {
                    type: 'A',
                    name: SUB_DOMAIN,
                    content: ip,
                    ttl: 1,  // 自动TTL
                    proxied: false
                },
                { headers }
            );
            console.log(`🆕 记录创建成功: ${ip}`);
        }

        async function main() {
            try {
                const zoneId = await getZoneId();
                const records = await getDnsRecords(zoneId);
                const [ip1, ip2] = selectIps(availableIps);

                console.log('\n=== 将更新为以下IP ===');
                console.log(`主IP: ${ip1}`);
                console.log(`备用IP: ${ip2}`);

                // 更新/创建记录
                if (records.length > 0) {
                    await updateDns(zoneId, records[0].id, ip1);
                } else {
                    await createDns(zoneId, ip1);
                }

                if (records.length > 1) {
                    await updateDns(zoneId, records[1].id, ip2);
                } else if (ip1 !== ip2) {
                    await createDns(zoneId, ip2);
                }

                // 验证结果
                const finalRecords = await getDnsRecords(zoneId);
                console.log('\n=== 当前DNS记录 ===');
                finalRecords.forEach(r => console.log(`${r.name}: ${r.content}`));

            } catch (error) {
                console.error('❌ 发生错误:', error.response?.data || error.message);
                process.exit(1);
            }
        }

        main();
        EOF

        # 安装依赖并执行
        npm install axios --silent
        node updateDNS.js

    # ==================== 通知部分 ====================
    - name: Notify if no IPs found
      if: env.no_available_ips == 'true'
      env:
        # 可选：在仓库Secrets中配置SERVER_JIANG_KEY
        SERVER_JIANG_KEY: ${{ secrets.SERVER_JIANG_KEY }}
      run: |
        if [ -n "$SERVER_JIANG_KEY" ]; then
          curl -sS \
            --data "text=没有找到可用的 IP 地址" \
            --data "desp=检测端口: 6000，请检查 IP 段配置" \
            "https://sctapi.ftqq.com/$SERVER_JIANG_KEY.send"
        else
          echo "未配置SERVER_JIANG_KEY，跳过通知"
        fi
