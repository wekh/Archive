name: Get IP and Update Cloudflare DNS

###############################################################
#                   ⚙️ 使用前配置说明                          #
# 1️⃣ 仓库 Settings > Secrets 中添加：
#    - CLOUDFLARE_API_TOKEN : Cloudflare API 令牌
#    - SERVER_JIANG_KEY : Server酱的SCKEY（可选）
# 2️⃣ 修改 DOMAIN 和 SUB_DOMAIN 为你的实际域名
###############################################################

on:
  schedule:
    - cron: '0 */3 * * *'   # 每3小时运行一次
      timezone: Asia/Shanghai
  workflow_dispatch:          # 允许手动触发

jobs:
  get_and_update:
    runs-on: ubuntu-latest

    steps:
    # ==================== 初始化 ====================
    - name: Check out code
      uses: actions/checkout@v3

    # ==================== Python环境 ====================
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # ==================== 扫描可用IP ====================
    - name: Run IP fetching script (Port 6000)
      id: fetch_ips
      run: |
        import requests
        import ipaddress
        from concurrent.futures import ThreadPoolExecutor, as_completed
        import json

        def test_port(ip, port=6000):
            try:
                r = requests.get(f'http://{ip}:{port}/status', timeout=2)
                return r.status_code == 200
            except:
                return False

        def fetch_available_ips(ip_ranges):
            available_ips = []
            with ThreadPoolExecutor(max_workers=20) as executor:
                futures = {
                    executor.submit(test_port, str(ip)): str(ip)
                    for ip_range in ip_ranges
                    for ip in ipaddress.IPv4Network(ip_range)
                }
                for future in as_completed(futures):
                    ip = futures[future]
                    if future.result():
                        available_ips.append(ip)
                        print(f"✅ {ip} 可用")
            return available_ips

        if __name__ == "__main__":
            ip_ranges = [
                "118.79.113.0/24",
                "118.79.114.0/24",
                "183.188.22.0/24",
                "171.119.205.0/24",
                "116.179.130.0/24",
                "118.79.119.0/24",
                "118.79.139.0/24",
                "171.119.206.0/24",
                "171.125.90.0/24",
                "183.188.20.0/24",
                "118.79.12.0/24",
                "183.188.159.0/24"
            ]

            available_ips = fetch_available_ips(ip_ranges)
            print(f"\n共找到 {len(available_ips)} 个可用 IP")
            
            if available_ips:
                with open('available_ips.json', 'w') as f:
                    json.dump(available_ips, f)
            else:
                print("no_available_ips=true")
      shell: python

    - name: Check if IPs were found
      id: check_ips
      run: |
        if [ ! -f available_ips.json ]; then
          echo "no_available_ips=true" >> $GITHUB_ENV
        else
          echo "no_available_ips=false" >> $GITHUB_ENV
        fi

    # ==================== 更新 Cloudflare DNS ====================
    - name: Update Cloudflare DNS
      if: env.no_available_ips == 'false'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        DOMAIN: "wekh.qzz.io"     # ← 修改为你的主域名
        SUB_DOMAIN: "zb"          # ← 修改为你的子域名
      run: |
        cat << 'EOF' > updateDNS.js
        const fs = require('fs');
        const axios = require('axios');

        if (!process.env.CLOUDFLARE_API_TOKEN) {
          console.error('❌ 未检测到 CLOUDFLARE_API_TOKEN');
          process.exit(1);
        }

        const CLOUDFLARE_API_TOKEN = process.env.CLOUDFLARE_API_TOKEN;
        const DOMAIN = process.env.DOMAIN;
        const SUB_DOMAIN = process.env.SUB_DOMAIN;
        const FULL_DOMAIN = `${SUB_DOMAIN}.${DOMAIN}`;
        const CLOUDFLARE_API_URL = 'https://api.cloudflare.com/client/v4';
        const headers = {
          'Authorization': `Bearer ${CLOUDFLARE_API_TOKEN}`,
          'Content-Type': 'application/json'
        };

        const availableIps = JSON.parse(fs.readFileSync('./available_ips.json', 'utf8'));
        console.log('=== 可用 IP 列表 ===');
        availableIps.forEach(ip => console.log('→', ip));

        async function getZoneId() {
          const res = await axios.get(`${CLOUDFLARE_API_URL}/zones?name=${DOMAIN}`, { headers });
          return res.data.result[0].id;
        }

        async function getDnsRecords(zoneId) {
          const res = await axios.get(
            `${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records?type=A&name=${FULL_DOMAIN}`,
            { headers }
          );
          return res.data.result;
        }

        async function updateDns(zoneId, recordId, ip) {
          await axios.put(
            `${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records/${recordId}`,
            { type: 'A', name: SUB_DOMAIN, content: ip, ttl: 1, proxied: false },
            { headers }
          );
          console.log(`✅ 更新: ${ip}`);
        }

        async function createDns(zoneId, ip) {
          await axios.post(
            `${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records`,
            { type: 'A', name: SUB_DOMAIN, content: ip, ttl: 1, proxied: false },
            { headers }
          );
          console.log(`🆕 创建: ${ip}`);
        }

        async function main() {
          try {
            const zoneId = await getZoneId();
            const records = await getDnsRecords(zoneId);

            console.log(`\n当前记录数: ${records.length}`);
            console.log(`计划更新: ${availableIps.length} 个 IP`);

            for (let i = 0; i < availableIps.length; i++) {
              const ip = availableIps[i];
              if (records[i]) {
                await updateDns(zoneId, records[i].id, ip);
              } else {
                await createDns(zoneId, ip);
              }
            }

            // 删除多余记录
            if (records.length > availableIps.length) {
              const extra = records.slice(availableIps.length);
              for (const rec of extra) {
                await axios.delete(`${CLOUDFLARE_API_URL}/zones/${zoneId}/dns_records/${rec.id}`, { headers });
                console.log(`🗑 删除: ${rec.content}`);
              }
            }

            const finalRecords = await getDnsRecords(zoneId);
            console.log('\n=== 当前 DNS 记录 ===');
            finalRecords.forEach(r => console.log(`${r.name} → ${r.content}`));
          } catch (e) {
            console.error('❌ 出错:', e.response?.data || e.message);
            process.exit(1);
          }
        }

        main();
        EOF

        npm install axios --silent
        node updateDNS.js

    # ==================== 通知部分 ====================
    - name: Notify if no IPs found
      if: env.no_available_ips == 'true'
      env:
        SERVER_JIANG_KEY: ${{ secrets.SERVER_JIANG_KEY }}
      run: |
        if [ -n "$SERVER_JIANG_KEY" ]; then
          curl -sS \
            --data "text=没有找到可用的 IP 地址" \
            --data "desp=检测端口: 6000，请检查 IP 段配置" \
            "https://sctapi.ftqq.com/$SERVER_JIANG_KEY.send"
        else
          echo "未配置 SERVER_JIANG_KEY，跳过通知"
        fi
